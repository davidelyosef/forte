import{Component, OnInit, ViewChild, ElementRef}from '@angular/core';import{ArtistsService}from 'src/app/services/artists.service';import{Artist}from 'src/app/models/artist';import{ExhibitionsService}from 'src/app/services/exhibitions.service';import{PublicationsService}from 'src/app/services/publications.service';import{InfoService}from 'src/app/services/info.service';import{EventsService}from 'src/app/services/events.service';import{CarouselPicturesService}from 'src/app/services/carousel-pictures.service';import{Exhibition}from 'src/app/models/exhibition';import{Publication}from 'src/app/models/publication';import{MyEvent}from 'src/app/models/event';import{Info}from 'src/app/models/info';import{NgbModal, ModalDismissReasons}from '@ng-bootstrap/ng-bootstrap';import{ImageProps}from 'src/app/models/imageProp';import{myApp}from 'src/app/exports';import{SubscribeService}from 'src/app/services/subscribe.service';import{Subscribe}from 'src/app/models/subscribe';import{AdminService}from 'src/app/services/admin.service';import{Store}from '@ngrx/store';import{Router}from '@angular/router';@Component({selector: 'app-admin-panel', templateUrl: './admin-panel.component.html', styleUrls: ['./admin-panel.component.scss']})export class AdminPanelComponent implements OnInit{public app: string=myApp.url; public isCollapsed=false; public exhibitionsCollapsed=false; public eventsCollapsed=false; public publicationsCollapsed=false; public carouselCollapsed=false; public infoCollapsed=false; public subscribeCollapsed=false; public class: string='block'; public subClass: string='none'; public exhibitionClass: string='none'; public eventClass: string='none'; public publicationClass: string='none'; public carouselClass: string='none';
public eventImageClass: string='none'; public changePublicationImageClass: string='none'; public changeEventImageClass: string='none'; public addExhibitionImageClass: string='none'; public changeExhibitionImageClass: string='none'; public uploadFileClass: string='none'; public publicationImageClass: string='none'; public delete: string='none'; public artistCroppedImageClass: string='none'; public exhibitionDetailsImage: string='none'; public exhibitionArtistClass: string='none'; public image: File; public infoImg: File; public carouselImg: File; public eventImg: File; public exhibitionCroppedImg: File; public exhibitionCoverImage: File; public publicationVideo: File; public mainPublicationImage: File; public addMainPictureImage: File; public addPictureImage: File; public addCroppedPictureImage: File; public updateCroppedImage: File; public publicationImage: File; public addCvFile: File; public updateCvFile: File; public addImageOrElse: boolean=false; public isMainImage: boolean; public artists: Artist[]; public worksArtists: Artist[]=[]; public representedArtists: Artist[]=[]; public currentPublication: Publication; public currentEvent: MyEvent; public currentExhibition: Exhibition; public exhibitions: Exhibition[]; public events: MyEvent[]; public publications: Publication[]; public carouselPictures; public info: Info; public closeResult: string; public subscribes: Subscribe[]; public pictureAlreadyExists: boolean; public artistImages: string[]=[]; public exhibitionImages: string[]=[]; public eventImages: string[]=[]; public publicationImages: string[]=[]; public infoImages: string[]=[]; public carouselImages: string[]=[]; public artistCvs: string[]=[]; @ViewChild('content',{static: false}) content: ElementRef; @ViewChild('add',{static: false}) add: ElementRef; @ViewChild('update',{static: false}) update: ElementRef; public artistForm: Artist={cv: '', fullName: '', status: '', content: '', mainImageName:{}, imageProps: [], croppedPicture:{filename: '', alt: ''}};public imageForm: ImageProps={fileName: '', artWork: 'Untitled', material: '', size: '', alt: ''};public exhibitionForm: Exhibition={exhibitionName: '', exhibitionArtist: '', opening: '', closing: '', exhibitionDetails: [{artist: '', existArtsist: false}], imgSrc: '', imgCover: '', address: 'Forte Gallery, 39 Shabazi St, Neve Tzedek, Tel Aviv', status: '', exhibitionDetailsImageCover:{alt: '', fileName: ''}, about: '', currator:{artist: '', existArtsist: false}};public eventForm: MyEvent={date: '', eventName: '', eventDetails: '', fileName: '', imageName: '', eventImages: [], status: '', activeStatus: false,};public publicationForm: Publication={fullName: '', bookName: '', bookDetails: '', video: '', mainImageName: '', allImages: []};public artistCroppedImageForm: any={alt: "", fileName: undefined};public carouselImageForm={name: '', imageName: ''};public publicationImageForm={alt: "", fileName: undefined};public eventImageForm={alt: "", fileName: undefined};public exhibitionImageForm={alt: "", fileName: undefined};public exhibitionMainDetailsImageForm={alt: "", fileName: undefined};public exhibitionArtistForm={artist: '', existArtsist: false};constructor(private artistsService: ArtistsService, private exhibitionsService: ExhibitionsService, private infosService: InfoService, private publicationsService: PublicationsService, private eventsService: EventsService, private carouselPicturesService: CarouselPicturesService, private modalService: NgbModal, private subscribeService: SubscribeService, private adminService: AdminService, private store: Store<any>, private router: Router){}public addingArtistForm(): void{this.clearArtistForm(); this.update.nativeElement.style.display='none'; this.add.nativeElement.style.display='inline-block';}public setArtistResume(e): void{this.addCvFile=<File>e.target.files[0];}public updateArtistImage(): void{if (!this.image) this.artistsService.updateArtist(this.artistForm._id, this.artistForm).subscribe(); else{if (!this.checkFileAvailable(this.artistImages, this.image.name, true)){const fd=new FormData(); fd.append("myImage", this.image, this.image.name); fd.append("updatedImage", JSON.stringify(this.artistForm.mainImageName)); fd.append("id", this.artistForm._id); this.artistsService.patchImage(fd).subscribe(()=>{}, err=>{this.artistForm.mainImageName.fileName=this.image.name; this.artistImages.push(this.image.name);});}}this.changesEmitted();}public deleteImage(): void{if (confirm("Are you sure that you want to delete this picture ?")){const indexInArray=this.artistForm.imageProps.findIndex( image=> image.fileName===this.imageForm.fileName ? true : false ); this.artistForm.imageProps.splice(indexInArray, 1); this.artistsService.updateArtist(this.artistForm._id, this.artistForm).subscribe();}}public setAddingMainPictureImage(e): void{this.addPictureImage=<File>e.target.files[0];}public setAddingPictureImage(e): void{this.addMainPictureImage=<File>e.target.files[0];}public setAddingCroppedPictureImage(e): void{this.addCroppedPictureImage=<File>e.target.files[0];}public setUpdateCroppedImage(e): void{this.updateCroppedImage=<File>e.target.files[0];}public addImage(): void{if (this.image){if (!this.checkFileAvailable(this.artistImages, this.image.name, true)){this.imageForm.fileName=this.image.name; const fd=new FormData(); fd.append("artistID", this.artistForm._id); fd.append("artistForm", JSON.stringify(this.artistForm)); fd.append("myImage", this.image, this.image.name); fd.append("imageForm", JSON.stringify(this.imageForm)); this.artistsService.postImage(fd).subscribe(()=>{}, ()=>{this.artistImages.push(this.image.name); this.changesEmitted(); this.imageForm.fileName=this.image.name; this.artistForm.imageProps.push(this.imageForm);});}}else alert('Please choose a file');}public setImage($event): void{this.image=<File>$event.target.files[0];}public updateForm(artist): void{this.add.nativeElement.style.display='none'; this.update.nativeElement.style.display='inline-block'; this.artistForm=artist;}public openUpdateModal(content, image, boolean): void{this.hideAllModalDivs(); this.addImageOrElse=false; this.class='block'; this.uploadFileClass='block'; if (boolean) this.uploadFileClass='block'; else this.uploadFileClass='none'; this.delete=boolean===true ? 'none' : 'block'; this.open(content); this.imageForm=image;}public openAddImageModal(content): void{this.hideAllModalDivs(); this.clearImageForm(); this.addImageOrElse=true; this.class='block'; this.uploadFileClass='block'; this.open(content);}public changeArtistCv(e): void{console.log(this.artistForm.cv); const chosenFile=<File>e.target.files[0]; let available=!this.checkFileAvailable(this.artistCvs, chosenFile.name, true); if (available) this.updateCvFile=chosenFile; else e.target.files[0]=undefined;}public updateArtistCroppedImage(): void{if (this.updateCroppedImage){if (!this.checkFileAvailable(this.artistImages, this.updateCroppedImage.name, true)){const fd=new FormData(); fd.append('image', this.updateCroppedImage, this.updateCroppedImage.name); fd.append('artist', JSON.stringify(this.artistForm)); fd.append('alt', this.artistCroppedImageForm.alt); this.artistsService.updateArtistWithFiles(fd).subscribe(()=> this.openSuccessModal(), err=>{this.openSuccessModal(); this.artistForm.croppedPicture.alt=this.artistCroppedImageForm.alt; this.artistForm.croppedPicture.filename=this.updateCroppedImage.name; this.artistImages.push(this.updateCroppedImage.name);});}}else{this.artistForm.croppedPicture.alt=this.artistCroppedImageForm.alt; this.artistsService.updateArtist(this.artistForm._id, this.artistForm).subscribe(()=> this.openSuccessModal(), err=> this.openSuccessModal() );}}public openArtistCroppedImageModal(content): void{this.hideAllModalDivs(); this.delete='none'; this.artistCroppedImageClass='block'; this.open(content); this.artistCroppedImageForm.alt=this.artistForm.croppedPicture.alt;}public updateArtist(): void{if (!this.updateCvFile) this.artistsService.updateArtist(this.artistForm._id, this.artistForm).subscribe(); else{const available=!this.checkFileAvailable(this.artistCvs, this.updateCvFile.name, false) 
if (available){const fd=new FormData(); fd.append('pdf', this.updateCvFile, this.updateCvFile.name); fd.append('lastImage', this.artistForm.cv); this.artistsService.updateArtistResume(fd).subscribe(()=>{}, ()=>{const updatedArtist: Artist={_id: this.artistForm._id, fullName: this.artistForm.fullName, content: this.artistForm.content, status: this.artistForm.status, cv: this.updateCvFile.name}
this.artistsService.updateArtist(updatedArtist._id, updatedArtist).subscribe();});}else alert('CV file name already exist, please change the file name to continue.');}this.openSuccessModal();}public addArtist(): void{this.artistForm.cv=''; console.log(this.artistForm); if (this.addMainPictureImage && this.addPictureImage && this.addCroppedPictureImage && this.artistForm.content.length > 1 && this.artistForm.fullName.length > 1){let main=this.checkFileAvailable(this.artistImages, this.addMainPictureImage.name, false); let picture=this.checkFileAvailable(this.artistImages, this.addPictureImage.name, false); let cropped=this.checkFileAvailable(this.artistImages, this.addCroppedPictureImage.name, false); if (this.addCvFile){let cv=!this.checkFileAvailable(this.artistCvs, this.addCvFile.name, false); if (cv){this.artistForm.cv=this.addCvFile.name; const formDate=new FormData(); formDate.append('pdf', this.addCvFile, this.addCvFile.name); formDate.append('alt', 'hey you'); this.artistsService.addArtistResume(formDate).subscribe(()=>{console.log('error')}, ()=>{this.openSuccessModal(), console.log('success')});}}if (main) return alert('main image file name already exist, please change the file name to continue'); if (picture) return alert('images file name already exist, please change the file name to continue'); if (cropped) return alert('cropped image file name already exist, please change the file name to continue'); if (!main && !picture && !cropped){const fd=new FormData(); fd.append('images', this.addMainPictureImage, this.addMainPictureImage.name); fd.append('images', this.addPictureImage, this.addPictureImage.name); fd.append('images', this.addCroppedPictureImage, this.addCroppedPictureImage.name); fd.append('artist', JSON.stringify(this.artistForm)); this.artistsService.addArtistWithFiles(fd).subscribe(()=>{}, ()=>{this.artistForm.mainImageName={fileName: this.addMainPictureImage.name, artWork: "Untitled", material: "", size: ""}; this.artistForm.croppedPicture={filename: this.addCroppedPictureImage.name, alt: ""}; this.artistForm.imageProps=[{fileName: this.addPictureImage.name, artWork: "Untitled", material: "", alt: "", size: ""}]; this.artistImages.push(this.addMainPictureImage.name, this.addPictureImage.name, this.addCroppedPictureImage.name); if (this.artistForm.status==='Works') this.worksArtists.push(this.artistForm); else this.representedArtists.push(this.artistForm); this.openSuccessModal();});}}else alert('Please fill all the input fields to add the artist');}public deleteOnePictureArtist(fileName): void{let index: number; if (confirm("Are you sure that you want to delete this picture ?")){this.artistForm.imageProps.map(fileNamePicture=>{if (fileName===fileNamePicture.fileName){index=this.artistForm.imageProps.indexOf(fileNamePicture); this.artistForm.imageProps.splice(index, 1);}});}}public setExhibitionImage(e): void{this.exhibitionImageForm.fileName=<File>e.target.files[0];}public openAddExhibitionImageModal(content, exhibition): void{this.hideAllModalDivs(); this.addExhibitionImageClass='block'; this.open(content); this.currentExhibition=exhibition; this.exhibitionImageForm={fileName: undefined, alt: ''};}public addExhibitionImage(): void{if (this.exhibitionImageForm.fileName){const isExist=this.checkFileAvailable(this.exhibitionImages, this.exhibitionImageForm.fileName.name, true); if (!isExist){const fd=new FormData(); fd.append('image', this.exhibitionImageForm.fileName, this.exhibitionImageForm.fileName.name); fd.append('imageForm', JSON.stringify(this.exhibitionImageForm)); fd.append('exhibition', JSON.stringify ({_id: this.currentExhibition._id, exhibitionImages: this.currentExhibition.exhibitionImages}) ); this.exhibitionsService.addNewExhibitionImageToArray(fd).subscribe(()=>{}, ()=>{this.changesEmitted(); this.exhibitionImageForm.fileName=this.exhibitionImageForm.fileName.name; this.currentExhibition.exhibitionImages.push(this.exhibitionImageForm); this.exhibitionImages.push(this.exhibitionImageForm.fileName.name);});}}}public openChangeExhibitionImageModal(content, exhibition, image): void{this.hideAllModalDivs(); this.changeExhibitionImageClass='block'; this.open(content); this.currentExhibition=exhibition; this.exhibitionImageForm=image;}public openExhibitionArtistsModal(content, exhibition): void{this.hideAllModalDivs(); this.exhibitionArtistClass='block'; this.open(content); this.currentExhibition=exhibition;}public addArtistToExhibition(): void{this.currentExhibition.exhibitionDetails.push(this.exhibitionArtistForm); this.changesEmitted(); this.exhibitionArtistForm={artist: '', existArtsist: false}}public deleteArtistFromExhibition(artist, artists: Array<any>): void{if (confirm('Are you sure to delete this artist?')){const index=artists.findIndex(a=> a===artist ? true : false); artists.splice(index, 1);}}public changeAltOfExhibitionImage(): void{this.exhibitionsService.updateExhibition( this.currentExhibition._id,{exhibitionImages: this.currentExhibition.exhibitionImages}).subscribe(()=> this.changesEmitted(), err=> this.changesEmitted());}public deleteExhibitionImage(): void{const index=this.currentExhibition.exhibitionImages.findIndex( image=> image===this.exhibitionImageForm ? true : false ); this.currentExhibition.exhibitionImages.splice(index, 1); this.changeAltOfExhibitionImage();}public updateExhibitionDetailsImage(): void{if (this.exhibitionMainDetailsImageForm.fileName){let mainDetails=false; this.exhibitionImages.map(img=>{if (this.exhibitionMainDetailsImageForm.fileName.name===img){mainDetails=true; alert('main details image file name already exist, please change the file name to continue');}}); if (!mainDetails){const fd=new FormData(); fd.append('image', this.exhibitionMainDetailsImageForm.fileName, this.exhibitionMainDetailsImageForm.fileName.name); fd.append('exhibition', JSON.stringify({_id: this.currentExhibition._id, exhibitionDetailsImageCover: this.exhibitionMainDetailsImageForm})); fd.append('imageForm', JSON.stringify(this.exhibitionMainDetailsImageForm)); this.exhibitionsService.updateExhibitionMainDetailsImage(fd).subscribe(()=>{}, ()=>{this.changesEmitted(); this.exhibitionImages.push(this.exhibitionMainDetailsImageForm.fileName.name); const index=this.exhibitions.findIndex(ex=> ex.exhibitionName===this.currentExhibition.exhibitionName ? true : false); this.exhibitions[index].exhibitionDetailsImageCover.fileName=this.exhibitionMainDetailsImageForm.fileName.name;})}}else{this.currentExhibition.exhibitionDetailsImageCover.alt=this.exhibitionMainDetailsImageForm.alt; this.exhibitionsService.updateExhibition( this.currentExhibition._id,{exhibitionDetailsImageCover: this.currentExhibition.exhibitionDetailsImageCover}) .subscribe(()=> this.changesEmitted(), err=> console.error(err.message) );}}public openExhibitionDetailsCoverModal(content, exhibition, image): void{this.hideAllModalDivs(); this.exhibitionDetailsImage='block'; this.open(content); this.currentExhibition=exhibition; this.exhibitionMainDetailsImageForm={alt: image.alt, fileName: undefined}}public addExhibition(): void{if (this.exhibitionForm.exhibitionDetails[0].artist==='') this.exhibitionForm.exhibitionDetails.splice(0, 1); if (this.exhibitionCroppedImg && this.exhibitionCoverImage && this.exhibitionMainDetailsImageForm.fileName && this.exhibitionForm.address.length > 1 && this.exhibitionForm.opening.length > 1){let cropped=false; let cover=false; let mainDetails=false; this.exhibitionImages.map(img=>{if (this.exhibitionCroppedImg.name===img){cropped=true; alert('cover image file name already exist, please change the file name to continue');}; if (this.exhibitionCoverImage.name===img){cover=true; alert('cropped image file name already exist, please change the file name to continue');}if (this.exhibitionMainDetailsImageForm.fileName.name===img){mainDetails=true; alert('main details image file name already exist, please change the file name to continue');}}); if (!cropped && !cover && !mainDetails){const fd=new FormData(); this.exhibitionForm.exhibitionDetailsImageCover.alt=this.exhibitionMainDetailsImageForm.alt; fd.append('exhibitionImg', this.exhibitionCroppedImg, this.exhibitionCroppedImg.name); fd.append('exhibitionImg', this.exhibitionCoverImage, this.exhibitionCoverImage.name); fd.append('exhibitionImg', this.exhibitionMainDetailsImageForm.fileName, this.exhibitionMainDetailsImageForm.fileName.name)
fd.append('exhibition', JSON.stringify(this.exhibitionForm)); this.exhibitionsService.addExhibitionImage(fd).subscribe(()=> this.changesEmitted(), err=>{this.changesEmitted(); this.exhibitionForm.imgSrc=this.exhibitionCoverImage.name; this.exhibitionForm.imgCover=this.exhibitionCroppedImg.name; this.exhibitionForm.exhibitionDetailsImageCover={alt: this.exhibitionMainDetailsImageForm.alt, fileName: this.exhibitionMainDetailsImageForm.fileName.name}; this.exhibitions.push(this.exhibitionForm); this.exhibitionImages.push(this.exhibitionCoverImage.name, this.exhibitionCroppedImg.name, this.exhibitionMainDetailsImageForm.fileName.name);});}}else alert('You have to fill all the fields to add the exhibition'); this.exhibitionForm.exhibitionDetails=[{artist: '', existArtsist: false}];}public updateExhibition(exhibition): void{this.exhibitionsService.updateExhibition(exhibition._id, exhibition).subscribe(); this.open(this.content); this.class='none'; this.subClass='block'; this.changesEmitted();}public openExhibitionModal(): void{this.hideAllModalDivs(); this.exhibitionClass='block'; this.open(this.content);}public deleteExhibition(exhibition: Exhibition): void{if (confirm("Confirm that you want to delete this exhibition")){if (exhibition._id){this.exhibitionsService.deleteOneExhibition(exhibition._id).subscribe(); this.openSuccessModal(); const index=this.exhibitions.findIndex(ex=> ex._id===exhibition._id ? true : false); this.exhibitions.splice(index, 1);}else{this.exhibitionsService.getAllExhibitions().subscribe(exhibitions=>{const index=exhibitions.findIndex(ex=>{if (ex.exhibitionName===exhibition.exhibitionName){exhibition=ex; return true;}else return false;}); this.exhibitions.splice(index, 1); this.exhibitionsService.deleteOneExhibition(exhibition._id).subscribe(); this.openSuccessModal();});}}}public setExhibitionDetailsCover(e): void{this.exhibitionMainDetailsImageForm.fileName=<File>e.target.files[0];}public setExhibitionCroppedImage(e): void{this.exhibitionCroppedImg=<File>e.target.files[0];}public setExhibitionCoverImage(e): void{this.exhibitionCoverImage=<File>e.target.files[0];}public deleteOneArtist(artist: Artist): void{if (confirm("Confirm that you want to delete this artist")){if (artist.cv.length > 1){this.artistsService.deleteArtistResume(artist.cv).subscribe(()=>{}, ()=> console.log());}if (artist.status==='Works'){const index=this.worksArtists.findIndex(a=> a._id===artist._id ? true : false); this.worksArtists.splice(index, 1);}else{const index=this.representedArtists.findIndex(a=> a._id===artist._id ? true : false); this.representedArtists.splice(index, 1);}this.artistsService.deleteOneArtist(artist._id).subscribe(); this.openSuccessModal();}}public openEventModal(content): void{this.hideAllModalDivs(); this.open(content); this.eventClass='block';}public openEventImageModal(event): void{this.hideAllModalDivs(); this.eventImageClass='block'; this.open(this.content); this.currentEvent=event; this.eventImageForm={alt: "", fileName: undefined}}public openChangeEventModal(event, image): void{this.hideAllModalDivs(); this.changeEventImageClass='block'; this.open(this.content); this.currentEvent=event; this.eventImageForm=image;}public changeAltOfEventImage(): void{this.eventsService.updateEvent(this.currentEvent._id,{eventImages: this.currentEvent.eventImages}) .subscribe(()=> this.changesEmitted(), err=> this.changesEmitted() );}public deleteEventImage(): void{const index=this.currentEvent.eventImages.findIndex(image=> image===this.eventImageForm ? true : false); this.currentEvent.eventImages.splice(index, 1); this.changeAltOfEventImage();}public setEventImage(e): void{this.eventImageForm.fileName=<File>e.target.files[0];}public addEvent(): void{if (this.eventImageForm.fileName && this.eventForm.eventName.length > 1 && this.eventForm.date.length > 1 && this.eventForm.status.length > 1){let exist=false; this.events.map(e=>{if (e.eventName===this.eventForm.eventName) exist=true;}); if (!exist){const available=!this.checkFileAvailable(this.eventImages, this.eventImageForm.fileName.name, true); console.log(available); if (available){const fd=new FormData(); fd.append('eventImg', this.eventImageForm.fileName, this.eventImageForm.fileName.name); fd.append('event', JSON.stringify(this.eventForm)); this.eventsService.addEventImage(fd).subscribe(()=> this.changesEmitted(), err=>{this.changesEmitted(); this.eventImages.push(this.eventImageForm.fileName.name); this.eventForm.fileName=this.eventImageForm.fileName.name; this.events.push(this.eventForm); this.eventImageForm.fileName=undefined;});}}else alert('Event name already exist, please choose another name');}else alert('Please fill all the input fields to add the event');}public addEventImage(): void{const event={_id: this.currentEvent._id, eventImages: this.currentEvent.eventImages}; if (this.eventImageForm.fileName){const available=!this.checkFileAvailable(this.eventImages, this.eventImageForm.fileName.name, true); if (available){const fd=new FormData(); fd.append('image', this.eventImageForm.fileName, this.eventImageForm.fileName.name); fd.append('event', JSON.stringify(event)); fd.append('newImage', JSON.stringify(this.eventImageForm)); this.eventsService.addEventImageToArray(fd).subscribe(()=>{}, ()=>{this.changesEmitted(); const index=this.events.findIndex(e=> e.eventName===this.currentEvent.eventName ? true : false); const newEventImg={alt: this.eventImageForm.alt, fileName: this.eventImageForm.fileName.name}
this.events[index].eventImages.push(newEventImg); this.eventImages.push(this.eventImageForm.fileName.name);});}}}public deleteEvent(event: MyEvent): void{if (confirm("Confirm that you want to delete this event")){const index=this.events.findIndex(e=> e.eventName===event.eventName ? true : false); if (!event._id){this.eventsService.getAllEvents().subscribe(events=>{this.events=events; const newEvent=this.events.find(e=> e.eventName===event.eventName ? true : false); this.eventsService.deleteOneEvent(newEvent._id).subscribe(); this.openSuccessModal(); this.events.splice(index, 1);}, err=> console.log(err.message));}else{this.eventsService.deleteOneEvent(event._id).subscribe(); this.openSuccessModal(); this.events.splice(index, 1);}}}public updateEvent(event: MyEvent): void{if (!this.eventImageForm.fileName) this.eventsService.updateEvent(event._id, event).subscribe(()=> this.openSuccessModal(), err=> console.error(err.message) ); else{const available=!this.checkFileAvailable(this.eventImages, this.eventImageForm.fileName.name, true); if (available){const fd=new FormData(); fd.append('eventImg', this.eventImageForm.fileName, this.eventImageForm.fileName.name); fd.append('event', JSON.stringify(event)); this.eventsService.updateEventImage(fd).subscribe(()=>{}, ()=>{this.openSuccessModal(); const index=this.events.findIndex(e=> e.eventName===event.eventName ? true : false) 
this.events[index].fileName=this.eventImageForm.fileName.name; this.eventImageForm.fileName=undefined;});}}}public deletePublication(id): void{if (confirm("Confirm that you want to delete this publication")){this.publicationsService.deleteOnePublication(id).subscribe(); this.openSuccessModal(); const index=this.publications.findIndex(publication=> publication._id===id ? true : false); this.publications.splice(index, 1);}}public addNewPublicationVideo(event): any{this.publicationVideo=<File>event.target.files[0];}public setPublicationMainImage(e): void{this.mainPublicationImage=<File>e.target.files[0];}public setPublicationImage(e): void{this.publicationImage=<File>e.target.files[0];}public openPublicationImageModal(content, publication): void{this.hideAllModalDivs(); this.open(content); this.publicationImageClass='block'; this.currentPublication=publication; this.publicationImageForm={alt: "", fileName: ""}}public openPublicationImageChangeModal(content, image, publication): void{this.hideAllModalDivs(); this.open(content); this.changePublicationImageClass='block'; this.publicationImageForm=image; this.currentPublication=publication;}public changeAltOfPublicationImage(): void{this.publicationsService.updatePublication( this.currentPublication._id,{allImages: this.currentPublication.allImages}) .subscribe(()=> this.changesEmitted(), err=> this.changesEmitted() );}public deletePublicationImage(): void{const index=this.currentPublication.allImages.findIndex(image=> image===this.publicationImageForm ? true : false ); this.currentPublication.allImages.splice(index, 1); this.publicationsService.updatePublication( this.currentPublication._id,{allImages: this.currentPublication.allImages}) .subscribe(()=> this.changesEmitted(), err=> this.changesEmitted() );}public addPublicationImage(): void{if (this.publicationImage && this.currentPublication.fullName.length > 1 && this.currentPublication.bookName.length > 1){const available=!this.checkFileAvailable(this.publicationImages, this.publicationImage.name, true); if (available){const fd=new FormData(); fd.append('image', this.publicationImage, this.publicationImage.name); fd.append('publication', JSON.stringify(this.currentPublication)); fd.append('imageForm', JSON.stringify(this.publicationImageForm)); this.publicationsService.addPublicationImage(fd).subscribe(()=> this.changesEmitted(), err=>{this.publicationImages.push(this.publicationImage.name); this.changesEmitted(); this.publicationImageForm.fileName=this.publicationImage.name; this.currentPublication.allImages.push(this.publicationImageForm);});}}else alert('Please fill al the input fields in order to add publication');}public updatePublication(publication: Publication): void{if (this.mainPublicationImage===undefined && this.publicationVideo===undefined){this.publicationsService.updatePublication(publication._id, publication).subscribe(); this.openSuccessModal();}else{const fd=new FormData(); if (this.mainPublicationImage){let main: boolean=!this.checkFileAvailable(this.publicationImages, this.mainPublicationImage.name, false); if (main){fd.append("myAddedFile", this.mainPublicationImage, this.mainPublicationImage.name); this.publicationImages.push(this.mainPublicationImage.name);}else alert('main publication file name already exist, please choose another name to continue');}if (this.publicationVideo){let video: boolean=!this.checkFileAvailable(this.publicationImages, this.publicationVideo.name, false); if (video){fd.append("myAddedFile", this.publicationVideo, this.publicationVideo.name); this.publicationImages.push(this.publicationVideo.name);}else alert('video file name already exist, please choose another name to continue');}fd.append("publication", JSON.stringify(publication)); this.publicationsService.patchImage(fd).subscribe(()=> this.openSuccessModal(), err=>{this.openSuccessModal(); if (this.mainPublicationImage) publication.mainImageName=this.mainPublicationImage.name; if (this.publicationVideo) publication.video=this.publicationVideo.name;});}}public openPublicationModal(content): void{this.hideAllModalDivs(); this.open(content); this.publicationClass='block';}public addPublication(): void{if (this.mainPublicationImage && this.publicationVideo && this.publicationImage && this.publicationForm.fullName.length > 1 && this.publicationForm.bookName.length > 1){let main: boolean=true; let video: boolean=true; let image: boolean=true; this.publicationImages.map(img=>{if (img===this.mainPublicationImage.name) main=false; if (img===this.publicationVideo.name) video=false; if (img===this.publicationImage.name) image=false;}); if (!video) alert('video file name already exist, please change the file name to continue'); if (!main) alert('main image file name already exist, please change the file name to continue'); if (!image) alert('publication image file name already exist, please change the file name to continue') 
if (main && video && image){const fd=new FormData(); fd.append('file', this.mainPublicationImage, this.mainPublicationImage.name); fd.append('file', this.publicationVideo, this.publicationVideo.name); fd.append('file', this.publicationImage, this.publicationImage.name); fd.append('publication', JSON.stringify(this.publicationForm)); this.publicationsService.addPublicationWithFiles(fd).subscribe(()=> this.changesEmitted(), ()=>{this.changesEmitted(); this.publicationForm.mainImageName=this.mainPublicationImage.name; this.publicationForm.video=this.publicationVideo.name; this.publicationForm.allImages=[]; this.publicationForm.allImages.push({fileName: this.publicationImage.name, alt: ''}); this.publications.push(this.publicationForm); this.publicationImages.push(this.publicationImage.name, this.publicationVideo.name, this.mainPublicationImage.name);});}}else alert('Please fill all the input fields to add the publication');}public deleteCarouselPicture(carouselName): void{if (confirm("Confirm that you want to delete this picture")) if (carouselName._id){this.carouselPicturesService.deleteOneCarouselPicture(carouselName._id).subscribe(()=>{const index=this.carouselPictures.indexOf(carouselName); this.carouselPictures.splice(index, 1); this.openSuccessModal();}, err=> console.log(err));}else{this.carouselPicturesService.getAllCarouselPictures().subscribe(carouselPictures=>{this.carouselPictures=carouselPictures; this.carouselPictures.map(one=>{if (one.imageName===carouselName.imageName){const index=this.carouselPictures.indexOf(one); this.carouselPicturesService.deleteOneCarouselPicture(one._id).subscribe(); this.carouselPictures.splice(index, 1); this.openSuccessModal();}})}, err=> console.error(err.message))}}public updateCarouselPicture(carousel): void{if (!this.carouselImg){this.carouselPicturesService.updateCarouselPicture(carousel._id, carousel).subscribe(()=> this.openSuccessModal(), err=> console.error(err.message) );}else{if (!carousel._id){this.carouselPicturesService.getAllCarouselPictures().subscribe((carousels)=>{this.carouselPictures=carousels; this.carouselPictures.map(one=>{if (one.imageName===carousel.imageName){carousel._id=one._id; const available=!this.checkFileAvailable(this.carouselImages, this.carouselImg.name, true); if (available){const fd=new FormData(); fd.append('carouselImg', this.carouselImg, this.carouselImg.name); fd.append('carousel', JSON.stringify(carousel)); this.carouselPicturesService.updateCarouselImage(fd).subscribe(()=> this.openSuccessModal(), err=>{this.carouselPictures.map(one=>{if (one._id===carousel._id){one.name=carousel.name; one.imageName=this.carouselImg.name}}) 
this.openSuccessModal();});}}})}, err=> console.error(err.message));}else{const available=!this.checkFileAvailable(this.carouselImages, this.carouselImg.name, true); if (available){const fd=new FormData(); fd.append('carouselImg', this.carouselImg, this.carouselImg.name); fd.append('carousel', JSON.stringify(carousel)); this.carouselPicturesService.updateCarouselImage(fd).subscribe(()=> this.openSuccessModal(), err=>{this.carouselPictures.map(one=>{if (one._id===carousel._id){one.name=carousel.name; one.imageName=this.carouselImg.name}}) 
this.openSuccessModal();}, err=> console.error(err.message));}}}}public addCarouselImage(): void{if (!this.carouselImg) this.carouselPicturesService.addCarouselPicture(this.carouselImageForm).subscribe(()=> this.changesEmitted(), err=> console.error(err.message)); else{const available=!this.checkFileAvailable(this.carouselImages, this.carouselImg.name, true); if (available){const fd=new FormData(); fd.append('carouselImg', this.carouselImg, this.carouselImg.name); fd.append('carousel', JSON.stringify(this.carouselImageForm)); this.carouselPicturesService.addCarouselImage(fd).subscribe(()=> this.changesEmitted(), err=>{let carouselImage={name: this.carouselImageForm.name, imageName: this.carouselImg.name,}; this.carouselPictures.push(carouselImage); this.changesEmitted();});}}}public openCarouselModal(content): void{this.hideAllModalDivs(); this.open(content); this.carouselClass='block';}public setCarouselImage(e): void{this.carouselImg=<File>e.target.files[0];}public updateInfo(info: Info): void{if (!this.infoImg){this.infosService.updateInfo(info._id, info).subscribe(()=> this.openSuccessModal(), err=> console.log(err.message) );}else{const available=!this.checkFileAvailable(this.infoImages, this.infoImg.name, true); if (available){const fd=new FormData(); fd.append('infoImg', this.infoImg, this.infoImg.name); fd.append('updatedImage', JSON.stringify(info)); this.infosService.updateInfoImage(fd).subscribe(()=> this.openSuccessModal(), ()=>{this.openSuccessModal(); info.img=this.infoImg.name;});}}}public setInfoImg(e): void{this.infoImg=e.target.files[0];}public deleteAllSubscriptions(): void{if (confirm('You sure to delete all the subscriptions?')){this.subscribeService.deleteAllSubscribes().subscribe(()=>{this.subscribes=[]; this.openSuccessModal();}, err=> console.error(err.message) );}}public deleteOneSubscribe(subscribe): void{if (confirm('You sure to delete this subscription?')){if (subscribe._id){this.deleteSub(subscribe._id);}else{this.subscribeService.getAllSubscriptions().subscribe(subscribes=>{const subscribe=subscribes.find(sub=> sub.email===subscribe.email ? true : false); this.deleteSub(subscribe._id);})}}}ngOnInit(){this.adminService.getAdmins().subscribe(admin=>{this.store.select('adminState').subscribe(user=>{if (user.username===admin[0].username && user.password===admin[0].password){this.getAllArtists(); this.getAllExhibitions(); this.getAllEvents(); this.getAllPublications(); this.getCarousel(); this.getInfo(); this.subscribeService.getAllSubscriptions().subscribe(subscribes=> this.subscribes=subscribes, err=> console.error(err.message) );}else{this.router.navigateByUrl('/forte_great_admin');}});})}private getAllArtists(): void{this.artistsService.getAllArtists().subscribe(artists=>{this.artists=artists; this.artists.map(artist=>{this.artistImages.push(artist.mainImageName.fileName, artist.croppedPicture.filename); artist.imageProps.map(img=> this.artistImages.push(img.fileName)); this.artistCvs.push(artist.cv); if (artist.status==='Works') this.worksArtists.push(artist); else this.representedArtists.push(artist);});}, err=> console.error(err.message));}private getAllExhibitions(): void{this.exhibitionsService.getAllExhibitions().subscribe(exhibitions=>{this.exhibitions=exhibitions, err=> console.error(err.message); this.exhibitions.map(exhibition=>{this.exhibitionImages.push(exhibition.imgCover, exhibition.imgSrc, exhibition.exhibitionDetailsImageCover.fileName); exhibition.exhibitionImages.map(img=> this.exhibitionImages.push(img.fileName));})});}private getAllEvents(): void{this.eventsService.getAllEvents().subscribe(events=>{this.events=events, err=> console.error(err.message); this.events.map(event=>{this.eventImages.push(event.fileName); event.eventImages.map(img=> this.eventImages.push(img.fileName));});});}private getAllPublications(): void{this.publicationsService.getAllPublications().subscribe(publications=>{this.publications=publications, err=> console.error(err.message); this.publications.map(publication=>{this.publicationImages.push(publication.video, publication.mainImageName); publication.allImages.map(img=> this.publicationImages.push(img.fileName));})});}private getInfo(): void{this.infosService.getInfo().subscribe(info=>{this.info=info[0], err=> console.error(err.message); this.infoImages.push(info[0].img);});}private getCarousel(): void{this.carouselPicturesService.getAllCarouselPictures().subscribe(carouselPictures=>{this.carouselPictures=carouselPictures, err=> console.error(err.message); this.carouselPictures.map(pic=> this.carouselImages.push(pic.imageName));});}private deleteSub(id): void{this.subscribeService.deleteSubscribe(id).subscribe(()=>{const index=this.subscribes.indexOf(id); this.subscribes.splice(index, 1); this.openSuccessModal();}, err=> console.error(err.message) );}private checkFileAvailable(imageArray: Array<any>, filename: string, boolean: boolean): boolean{let exist=false; imageArray.map(img=>{if (filename===img) exist=true;}); if (exist && boolean) alert('Image name already exist, please change the name of the file to continue'); return exist;}private openSuccessModal(): void{this.open(this.content); this.changesEmitted();}private changesEmitted(): void{this.hideAllModalDivs(); this.subClass='block'; this.delete='none'; setTimeout(()=> this.modalService.dismissAll(), 1500);}private getDismissReason(reason: any): string{if (reason===ModalDismissReasons.ESC){return 'by pressing ESC';}else if (reason===ModalDismissReasons.BACKDROP_CLICK){return 'by clicking on a backdrop';}else{return `with: ${reason}`;}}private clearImageForm(): void{this.imageForm={fileName: '', artWork: 'Untitled', material: '', size: ''}}private clearArtistForm(): void{this.artistForm={fullName: '', status: '', content: '', mainImageName:{}, imageProps: [], croppedPicture:{filename: '', alt: ''}}}private open(content): void{this.modalService.open(content,{ariaLabelledBy: 'modal-basic-title'}).result.then((result)=>{this.closeResult=`Closed with: ${result}`;}, (reason)=>{this.closeResult=`Dismissed ${this.getDismissReason(reason)}`;});}private hideAllModalDivs(): void{this.subClass=this.class=this.exhibitionClass=this.eventClass=this.publicationClass=this.carouselClass=this.publicationImageClass=this.uploadFileClass=this.eventImageClass=this.changePublicationImageClass=this.changeEventImageClass=this.addExhibitionImageClass=this.changeExhibitionImageClass=this.artistCroppedImageClass=this.exhibitionDetailsImage=this.exhibitionArtistClass='none';}}